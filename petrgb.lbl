
	{loadaddr:$0401}
{:cassport}
	rem this odd routine exists cuz i can't totally figure out the cassette port
	print "{clear}{down:2} initialize cassette port #2? (y/(n))"
	{:gc}
	get c$
	if c$="" then goto {:gc}
	if c$="y" then goto {:cp}
	goto {:initialize}
	{:cp}
	print
	print "press run/stop, and then type 'cont' and press <return>"
	load "",2
	print
	print " ok"
	goto {:initialize}


{:initialize}
	poke 59459,255 :rem set all bits to output
	poke 59467,peek(59467) and 227 :rem disabl shftreg cb2,&set to output
	poke 59468,(peek(59468) and 31) or 192 : rem set cb2 low
	poke 59468,peek(59468) and 254 :rem ca1 triggers falling edge
	bb=0
	gosub {:ardupwr}

{:loop}
	print "{clear}{down:2}
	print "  rgb led control"
	print "  ---------------"
	print
	print "  select mode"
	print
	print "  1 ... solid color "
	print "  2 ... rainbow      "
	print "  3 ... blinkenlights "
	print "  4 ... matrix"
	print "  5 ... shift register"
{:insub}
	print "  x ... exit led subroutine"
	print "  q ... quit to basic"
	print "  a ... power cycle arduino"
	print
	print
	input "  enter selection:";c$
	print
	if c$="" then goto {:loop}
	if c$="q" then {:bye}
	if c$="x" then c$="255"
	if c$="a" then gosub {:ardupwr}
	bb=val(c$):rem converts string to integer, bb=0 if nonnumeric
	if bb=0 then goto {:loop}
	if bb=255 then {:xsub}
	gosub {:sendbyte} :rem send mode selection to arduino
	on bb goto {:solid}, {:rainbow}, {:blinken}, {:matrix}, {:shftreg}
	goto {:loop}

 {:solid}
	print "{clear}{down:2}"
	print " solid color mode"
	input " enter r,g,b values (0-255)";r,g,b
	bb=r : gosub {:sendbyte}
	bb=g : gosub {:sendbyte}
	bb=b : gosub {:sendbyte}
	print
	goto {:insub}

 {:rainbow}
	print "{clear}{down:2}"
	print " rainbow mode"
	print
	goto {:insub}

 {:blinken}
	print "{clear}{down:2}"
	print " blinkenlights mode"
	input " enter r,g,b values (0-255)";r,g,b
	bb=r : gosub {:sendbyte}
	bb=g : gosub {:sendbyte}
	bb=b : gosub {:sendbyte}
	print
	goto {:insub}

 {:matrix}
	rem max # streams,80/40 cols,upward scroll speed, screen mem loc
	m=4 :c=80 :s$="    ":l=32768
	for i=0 to 24 : print : next i: rem clear screen

	{:matrixloop}
		get a$: if a$<>"" then goto {:exitmatrix} :rem exit if keypress
		gosub {:streams}
		if rnd(1)<.38 then gosub {:drips} :rem likelyhood of drip 38%
		goto {:matrixloop}

		{:streams}
		rem        character streams
		s=rnd(1)*m : rem number of streams in this loop
		for i=0 to s :x(i)=int(rnd(1)*c) :next i :rem stream positions
		rem define starting&ending locations for stream, & speed
		for y=rnd(1)*15 to rnd(1)*7+18 step rnd(1)+.3
		for i=0 to s : rem draw streams
		poke l+x(i)+(int(y-i)*c),rnd(1)*255
		print s$; :rem scroll upwards
		next i :next y :return

		{:drips}
		rem        character drips
		rem number of possible drips max streams-1
		for i=1 to rnd(1)*(m-1)
		dx=rnd(1)*c :rem drip x position
		for y=1 to 24 step rnd(1)+.75 :rem draw drip
		py=l+dx+int(y)*c
		poke py,rnd(1)*255 :poke py,rnd(1)*255 :poke py,32
		print s$; : rem scroll up
		next y :next i :return

	{:exitmatrix}
	bb=255 : gosub {:sendbyte}
	for i=0 to 24 : print : next i
	goto {:loop}


 {:shftreg}
	print "{clear}{down:2}"
	print " shift register mode"
	print
	input " enter r,g,b values (0-255)";r,g,b
	bb=r : gosub {:sendbyte}
	bb=g : gosub {:sendbyte}
	bb=b : gosub {:sendbyte}
	input " enter led matrix refresh delay (0-255)";bb
	gosub {:sendbyte}
	print
	print " press m to mute audio"
	print " press any other key to continue"""
	bb=1
	{:geta}
	get a$
	if a$="" then goto  {:geta}
	if a$="m" then bb=0
	gosub {:sendbyte}
	poke 59467,peek(59467)and227or16 :rem enable shift reg
	t=0
	d=0
	p$="+"
	rem set up for decimal to binary calculations
	z(1)=1
	for i=2 to 8
	z(i)=z(i-1)*2
	next i

	{:shiftloop}
		poke 59464,t : rem sets shift register timer
		poke 59466,d : rem ouputs on shift register

		print "{clear}{down:2} shift register mode"
		print
		print " timer:";t
		print
		print " data:";
		rem calculate and display which bits are on
		print (dand1);p$;(dand2);p$;(dand4);p$;(dand8);p$;
		print (dand16);p$;(dand32);p$;(dand64);p$;(dand128);"=";d
		print
		print " a - decrease data-10         e - decrease timer-10"
		print " s - decrease data-1          r - decrease timer-1"
		print " d - set data to 170          t - set timer to 128"
		print " f - increase data+1          y - increase timer+1"
		print " g - increase data+10         u - increase timer+10"
		print " x - exit subroutine          q - quit to basic"
		print " 0 - set timer & data to 0
		print
		print " numbers 1 through 8 set corresponding bits on data stream"

		{:getkey}
		get k$
		if k$="" then {:getkey}
		k=val(k$)
		if k=0 then goto {:alpha}

		{:bittoggle}
		k=z(k)
		d=(not(d and k)) and (not(not d and not k)):rem xor bits
		goto {:shiftloop}

		{:alpha}
		if k$="e" then t=t-10
		if k$="r" then t=t-1
		if k$="t" then t=128
		if k$="y" then t=t+1
		if k$="u" then t=t+10
		if k$="a" then d=d-10
		if k$="s" then d=d-1
		if k$="d" then d=170
		if k$="f" then d=d+1
		if k$="g" then d=d+10
		if k$="0" then d=0:t=0
		if k$="x" then goto {:initialize}
		if k$="q" then goto {:shftquit}
		if d<=-1 then d=255
		if d>=256 then d=0
		if t<=-1 then t=255
		if t>=256 then t=0
		goto {:shiftloop}

	{:shftquit}
	print
	print " quiting to basic"
	print " shift register mode is active"
	end


 {:ardupwr}
	poke 59456,(peek(59456)or16) :rem cassette port 2 motor off
	print "{clear}{down:2}power cycling arduino"
	print
	print "one moment";
	for j=1 to 25 :print ".";:next j
	poke 59456,(peek(59456)and239):rem cassette port 2 motor on
	for j=1 to 500 :print ".";:next j
	print : print "ok"
	return

{:xsub}
	print
	print " exiting subroutine..."
	gosub {:sendbyte}
	print " ok"
	goto {:loop}




{:sendbyte}
	rem send bb byte
	poke 59468,peek(59468) or 224 :rem set cb2 high to signal arduino
	poke 59457,bb :rem send byte
	poke 59468,(peek(59468) and 31) or 192 :rem return cb2 to low state

	{:waitca1}
	rem part of sendbyte subroutine, but doesn't strictly have to be
	if (peek(59469)and2)=0 then {:waitca1} : rem wait for ca1 strobe from arduino
	return

{:bye}
	print
	print "exiting rgb control"
	end

{:reminders}
	rem reminders
	poke 59468,peek(59468) or 224 :rem set cb2 high
	poke 59468,(peek(59468) and 31) or 192 :end :rem set cb2 low
	poke 59459,255 :rem set all bits to output
	poke 59467,peek(59467) and 227 :rem disabl shftreg cb2,&set to output
	poke 59467,peek(59467)and227or16 :rem enable shift reg
	poke 59464,t : rem sets shift register timer
	poke 59466,shftdata : rem ouputs on shift register
	poke 59471,j :rem send data out
	poke 59457,j :rem send data out and reset ca1 flag
	poke 59468,peek(59468) and 254 :rem ca1 triggers falling edge
	poke 59468,peek(59468) or 1 :rem ca1 trggers rising edge
	if (peek(59469) and 2)=0 then whatever :rem wait for ca1 to go high
	poke 59467,peek(59467) or 1 :rem data latched when ca1 triggers
	poke 59468,peek(59468) or 224 :rem set cb2 high
	poke 59456,(peek(59456)or16) :rem turn off cassette 2 motor/arduino
	poke 59456,(peek(59456)and239):rem turn on cassette 2 motor/arduino
